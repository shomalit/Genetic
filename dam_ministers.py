# -*- coding: utf-8 -*-
"""Dam_ministers.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Ipt4S0KDhO9lHvlwmpAyCfh7xCAsvMxt
"""

import random
from collections import Counter

class misisters :

    def make_Population(self) :

        '''Make first genaration of Damon's Minesters'''
        population=[]   #main list 
        chromoz=[0,1,2,3,4,5,6,7]      #shows where's each minister(index),Column
        s=0
        for _ in range(20):
          L=chromoz
          random.shuffle(L)
          population.append(L)
          s+=1
        print(f'{len(population)} Chromosomes has made successfuly !')
        #for item in population:
        #    print(item)
        return population
            
    def chooice_Best_parents(self):
        '''Select Best Parrents and save them for copy !'''
        sequence=[]   # Ministers columns situation
        gen_Score=[]
        population_List = misisters.make_Population(self)
        for item in population_List :
            #freq_dict=Counter(item)
            print(f'genes and report= {item} ')
        print('cho')
    def damon(self):
      count=8
      L=[]
      print('start')
      while count>0 :
        n=random.randint(0,7)
        print(n)
        for x in L:
          if n==x:break
          else:
            L.append(n)
        count =count-1
      print(L,count)  
# call
a=misisters()
a.damon()

from random import randint

class Minesters ():
  def __init__(self,param1=20):
    self.pop_Size=param1

  def make_Population_unfreq(self):
    '''Create first generation !! Unfrequented''' 
    done_C=0        # Counter of doing Tasks
    gen_List=[]
    pop_List=[]     # Population
    #---start----
    for _ in range(self.pop_Size):
      n=randint(0,7)  # Make first random minister.
      gen_List.append(n)
      #print(f'{n},{gen_List}\n')       # print First minister.
      while len(gen_List)<8 :           # do until making 8 unfrequented gen
        n =randint(0,7)
        #print(n)
        frqgen_C= 0                     # counter of frequented gen
        for x in range(0,len(gen_List)):
          if n==gen_List[x]:            # if find frequented gen set flag
            frqgen_C +=1
        if frqgen_C ==0 :               #if is not frequented append it
          gen_List.append(n)
        frqgen_C=0
        done_C +=1
      pop_List.append(gen_List) # add gens to population list
      gen_List=[]  
    #print(gen_List,done_C)
    #print(pop_List)
    return pop_List

#------------------
a=Minesters(10)
print(a.pop_Size)
a.make_Population_unfreq()